{"ast":null,"code":"import { of, switchMap } from 'rxjs';\nimport * as cardsData from '../data/cards-data.json';\nimport { CardModel } from '../models/card.model';\nimport * as i0 from \"@angular/core\";\nexport let DataRetrieverService = /*#__PURE__*/(() => {\n  class DataRetrieverService {\n    constructor() {}\n\n    getCards() {\n      return of(cardsData).pipe(switchMap(cardsObject => {\n        let cards = [];\n        let keys = Object.keys(cardsObject);\n\n        for (let key in keys) {\n          let card = cardsObject[key];\n\n          if (!card) {\n            continue;\n          }\n\n          let parsedCard = new CardModel(card.rank, card.suit, card.src);\n          cards.push(parsedCard);\n        }\n\n        return of(cards);\n      }));\n    }\n\n    getRandomCards() {\n      return this.getCards().pipe(switchMap(cards => {\n        let mixedCards = this.getMixedCards(cards);\n        return of(mixedCards);\n      }));\n    }\n\n    getMixedCards(cards) {\n      let currentIndex = cards.length,\n          randomIndex; // While there remain elements to shuffle.\n\n      while (currentIndex != 0) {\n        // Pick a remaining element.\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--; // And swap it with the current element.\n\n        [cards[currentIndex], cards[randomIndex]] = [cards[randomIndex], cards[currentIndex]];\n      }\n\n      return cards;\n    }\n\n  }\n\n  DataRetrieverService.ɵfac = function DataRetrieverService_Factory(t) {\n    return new (t || DataRetrieverService)();\n  };\n\n  DataRetrieverService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataRetrieverService,\n    factory: DataRetrieverService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataRetrieverService;\n})();","map":null,"metadata":{},"sourceType":"module"}